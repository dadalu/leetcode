package leetcode.editor.cn;
//ÂØπÈìæË°®ËøõË°åÊèíÂÖ•ÊéíÂ∫è
//ÂØπÈìæË°®ËøõË°åÊèíÂÖ•ÊéíÂ∫è„ÄÇ 
//
// 
//ÊèíÂÖ•ÊéíÂ∫èÁöÑÂä®ÁîªÊºîÁ§∫Â¶Ç‰∏ä„ÄÇ‰ªéÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÂºÄÂßãÔºåËØ•ÈìæË°®ÂèØ‰ª•Ë¢´ËÆ§‰∏∫Â∑≤ÁªèÈÉ®ÂàÜÊéíÂ∫èÔºàÁî®ÈªëËâ≤Ë°®Á§∫Ôºâ„ÄÇ 
//ÊØèÊ¨°Ëø≠‰ª£Êó∂Ôºå‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂÖÉÁ¥†ÔºàÁî®Á∫¢Ëâ≤Ë°®Á§∫ÔºâÔºåÂπ∂ÂéüÂú∞Â∞ÜÂÖ∂ÊèíÂÖ•Âà∞Â∑≤ÊéíÂ•ΩÂ∫èÁöÑÈìæË°®‰∏≠„ÄÇ 
//
// 
//
// ÊèíÂÖ•ÊéíÂ∫èÁÆóÊ≥ïÔºö 
//
// 
// ÊèíÂÖ•ÊéíÂ∫èÊòØËø≠‰ª£ÁöÑÔºåÊØèÊ¨°Âè™ÁßªÂä®‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÁõ¥Âà∞ÊâÄÊúâÂÖÉÁ¥†ÂèØ‰ª•ÂΩ¢Êàê‰∏Ä‰∏™ÊúâÂ∫èÁöÑËæìÂá∫ÂàóË°®„ÄÇ 
// ÊØèÊ¨°Ëø≠‰ª£‰∏≠ÔºåÊèíÂÖ•ÊéíÂ∫èÂè™‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂæÖÊéíÂ∫èÁöÑÂÖÉÁ¥†ÔºåÊâæÂà∞ÂÆÉÂú®Â∫èÂàó‰∏≠ÈÄÇÂΩìÁöÑ‰ΩçÁΩÆÔºåÂπ∂Â∞ÜÂÖ∂ÊèíÂÖ•„ÄÇ 
// ÈáçÂ§çÁõ¥Âà∞ÊâÄÊúâËæìÂÖ•Êï∞ÊçÆÊèíÂÖ•ÂÆå‰∏∫Ê≠¢„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•: 4->2->1->3
//ËæìÂá∫: 1->2->3->4
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•: -1->5->3->4->0
//ËæìÂá∫: -1->0->3->4->5
// 
// Related Topics ÊéíÂ∫è ÈìæË°® 
// üëç 388 üëé 0

public class InsertionSortList{
    public static void main(String[] args) {
        Solution solution = new InsertionSortList().new Solution();
        ListNode node = new ListNode(-1);
        node.next = new ListNode(5);
        node.next.next = new ListNode(3);
        node.next.next.next = new ListNode(4);
        node.next.next.next.next = new ListNode(0);
        /*
        node.next.next.next.next = new ReorderList.ListNode(5);
        node.next.next.next.next.next = new ReorderList.ListNode(6);
        node.next.next.next.next.next.next = new ReorderList.ListNode(7);
        node.next.next.next.next.next.next.next = new ReorderList.ListNode(8);
        node.next.next.next.next.next.next.next.next = new ReorderList.ListNode(9);
        node.next.next.next.next.next.next.next.next.next = new ReorderList.ListNode(10);*/
        solution.insertionSortList(node);
    }

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public static class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode cur = head;
        ListNode newListPre = new ListNode();
        ListNode insertList = newListPre;
        ListNode ret = newListPre;
        while (cur != null) {
            if (newListPre.next != null) {
                ListNode c = newListPre.next;
                ListNode pre = newListPre;
                while (c!=null) {
                    if (c.val <= cur.val) {
                        pre = c;
                        c = c.next;
                        if (c == null) {
                            ListNode next = cur.next;
                            cur.next = null;
                            pre.next = cur;
                            cur = next;
                        }
                    } else {
                        pre.next = cur;
                        ListNode next = cur.next;
                        cur.next = c;
                        cur = next;
                        break;
                    }
                }
            } else {
                ListNode next = cur.next;
                cur.next = null;
                newListPre.next = cur;
                cur = next;
            }

        }
        return ret.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}