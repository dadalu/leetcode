package leetcode.editor.cn;
//ÈáçÊéíÈìæË°®
//ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°® LÔºöL0‚ÜíL1‚Üí‚Ä¶‚ÜíLn-1‚ÜíLn Ôºå 
//Â∞ÜÂÖ∂ÈáçÊñ∞ÊéíÂàóÂêéÂèò‰∏∫Ôºö L0‚ÜíLn‚ÜíL1‚ÜíLn-1‚ÜíL2‚ÜíLn-2‚Üí‚Ä¶ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->4->2->3. 
//
// Á§∫‰æã 2: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4->5, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->5->2->4->3. 
// Related Topics ÈìæË°® 
// üëç 580 üëé 0

public class ReorderList{
    public static void main(String[] args) {
        Solution solution = new ReorderList().new Solution();
        ListNode node = new ListNode(1);
        node.next = new ListNode(2);
        node.next.next = new ListNode(3);
        node.next.next.next = new ListNode(4);
        node.next.next.next.next = new ListNode(5);
        node.next.next.next.next.next = new ListNode(6);
        node.next.next.next.next.next.next = new ListNode(7);
        node.next.next.next.next.next.next.next = new ListNode(8);
        node.next.next.next.next.next.next.next.next = new ListNode(9);
        node.next.next.next.next.next.next.next.next.next = new ListNode(10);
        //node.next.next.next.next.next.next.next.next.next.next = new ListNode(11);
        solution.reorderList(node);
    }

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 * 1 2 3 4 5 6
 */
public static class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
class Solution {
    public void reorderList(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        ListNode tail = new ListNode();
        while (fast != null) {
            if (fast.next == null) {
                tail = slow;
                slow = slow.next;
                break;
            }
            fast = fast.next.next;
            tail = slow;
            slow = slow.next;
        }
        tail.next = null;
        ListNode pre = null;
        ListNode cur = slow;
        ListNode next = null;
        while (cur != null) {
            next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        ListNode left = head;
        ListNode temp;
        while (pre != null&&left!=null) {
            next = left.next;
            left.next = pre;
            temp = pre.next;
            pre.next = next;
            pre = temp;
            left = next;
        }
        System.out.println(head);
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}